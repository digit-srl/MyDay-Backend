@model CallToActionViewModel
@{
    Layout = "LandingPage";
    ViewData["Title"] = "Call to Action";
}

@section Head { 
    <style>
#map {
    height: 400px;
    width: 100%;
}
    </style>
}

<div class="row">
    <div class="twelve columns">
        <p>
            Questa è un esempio di “Call to Action”: una <b>segnalazione</b> preparata da parte dell’autorità sanitaria che viene incrociata (in maniera anonima, direttamente sullo smartphone) con i dati raccolti da diAry.
            Se le tracce locali incrociano i luoghi e gli orari segnalati, verrà mostrata la corrispondente notifica.
        </p>

        <p><b>Nota bene:</b> per ora si tratta di sole segnalazioni di prova, senza alcuna rilevanza dal punto di vista sanitario.</p>
    </div>
</div>

<div class="row">
    <div class="twelve columns">
        <h3>Descrizione della segnalazione:</h3>
        <p>@Model.Description</p>

        <h3>Filtro</h3>

        <div id="map">

        </div>

        <p>Dal <b>@Model.From.ToLongDateString() @Model.From.ToLongTimeString()</b> al <b>@Model.To.ToLongDateString() @Model.To.ToLongTimeString()</b>.</p>
    </div>
</div>

<script type="text/javascript">
function initMap() {
    var center = { lat: @Model.BoundingBox[0], lng: @Model.BoundingBox[2] };
    var map = new google.maps.Map(
        document.getElementById('map'),
        { zoom: 3, center: center }
    );

    var filterCoordinates = [
        @string.Join(", ", from coord in Model.PolygonCoordinates
                           select string.Format("{{ lat: {1}, lng: {0} }}", coord[0], coord[1]))
        ];
    var filterPath = new google.maps.Polygon({
        paths: filterCoordinates,
        strokeColor: '#FF0000',
        strokeOpacity: 1.0,
        strokeWeight: 2,
        fillColor: '#FF0000',
        fillOpacity: 0.35
    });
    filterPath.setMap(map);

    var bounds = new google.maps.LatLngBounds();
    bounds.extend(new google.maps.LatLng(@Model.BoundingBox[0], @Model.BoundingBox[2]));
    bounds.extend(new google.maps.LatLng(@Model.BoundingBox[1], @Model.BoundingBox[3]));
    map.fitBounds(bounds);
}
</script>

<script async defer
src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB2kLvJ0s9zlCTgU99fgmn0SBmYDIkWdv8&callback=initMap">
</script>
